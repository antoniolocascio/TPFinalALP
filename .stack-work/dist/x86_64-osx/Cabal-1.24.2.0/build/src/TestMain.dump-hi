
==================== FINAL INTERFACE ====================
2017-11-28 12:24:38.67901 UTC

interface TPFinalALP-0.1.0.0-6CW1roJgnU72bzP54NcmHs:TestMain 8002
  interface hash: 22b93184fa2abc589b2d3aea03b75265
  ABI hash: 873d62701f819413a73864b3eac516b3
  export-list hash: e0d62ff819da1b8a3ab3dcb157c0f41e
  orphan hash: c3a65c51b611396ac14bf0645877455c
  flag hash: 74f090db6545284c46c29939db2ac790
  sig of: Nothing
  used TH splices: False
  where
exports:
  TestMain.aContorno
  TestMain.aEstructura
  TestMain.aPunto
  TestMain.cArea
  TestMain.cHijos
  TestMain.cPuntos
  TestMain.cropFitCont
  TestMain.fitRect
  TestMain.ignoreOutmost
  TestMain.isInner
  TestMain.maint
  TestMain.matDims
  TestMain.meanIntensityCont
  TestMain.pArea
  TestMain.removeInner
  TestMain.removeSmaller
  TestMain.Contorno{TestMain.C}
  TestMain.Estructura{TestMain.Circulo TestMain.Nada TestMain.Rectangulo}
  TestMain.Punto
module dependencies: BlurImage Threshold
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      byteable-0.1.1@byteable-0.1.1-2lU1pexQSLj1KbNO17UifQ
                      bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      charset-0.3.7.1@charset-0.3.7.1-8XzlqAFUmfXDSOZRmiDkgy
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      cryptohash-0.11.9@cryptohash-0.11.9-GS5kxCvgHwz5BrOJLsOWZp
                      cryptonite-0.23@cryptonite-0.23-B2QruyompNMGbr9rx9h1sv
                      data-default-0.7.1.1@data-default-0.7.1.1-Atv1ZD6t1rI1MrH9qSGaQC
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-bob6IQGdJq92c061H46zK
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-LBT1sjxIvyd63eC0aI9yNO
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-9zaGDEmgOixKkmLylWdN5l
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      inline-c-0.5.6.1@inline-c-0.5.6.1-4moQoAsJYTf3C5YPrpBPU3
                      inline-c-cpp-0.1.0.0@inline-c-cpp-0.1.0.0-2s9DVDsUzH2I9FLWk6Mzds
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW
                      linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p
                      memory-0.14.8@memory-0.14.8-5gChKptja3L48mJBRibgYj
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      old-locale-1.0.0.7@old-locale-1.0.0.7-KGBP1BSKxH5GCm0LnZP04j
                      opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      parsers-0.12.7@parsers-0.12.7-E2vtGM8ez3hAXial9fBM7R
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unix-2.7.2.1@unix-2.7.2.1
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block
         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-bob6IQGdJq92c061H46zK:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-LBT1sjxIvyd63eC0aI9yNO:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-9zaGDEmgOixKkmLylWdN5l:Data.Default.Instances.OldLocale
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.Instances
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Matx
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Point
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Rect
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Size
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Vec
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Mat
         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.JSON
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Arbitrary
         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Operators.Reduction
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Block.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.BoxedArray
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Monad
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.MutableBuilder
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Nat
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.NonEmpty
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Numerical.Subtractive
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ASCII7
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF16
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.String.Encoding.UTF32
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.AsciiString
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.Types.OffsetSize
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UArray.Base
                         basement-0.0.4@basement-0.0.4-5G9Gc8Ht9hD9gydJD2I2TQ:Basement.UTF8.Base
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS:Data.Bytes.Get
                         bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS:Data.Bytes.Signed
                         bytes-0.15.3@bytes-0.15.3-JnJk9rvpCHsKPq5vbMmKHS:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Bitmap
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Array.Chunked.Unboxed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Buildable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Element
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Keyed
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Collection.Mutable
                         foundation-0.0.17@foundation-0.0.17-CL5hY2f92B7EywaUc6v2Lf:Foundation.Tuple
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         inline-c-0.5.6.1@inline-c-0.5.6.1-4moQoAsJYTf3C5YPrpBPU3:Language.C.Inline
                         inline-c-0.5.6.1@inline-c-0.5.6.1-4moQoAsJYTf3C5YPrpBPU3:Language.C.Inline.Context
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Zoom
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.Plucker
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.Quaternion
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V0
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V1
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V2
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V3
                         linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V4
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Mat.Repa
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Features2d
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.ImgProc.CascadeClassifier
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.ImgProc.FeatureDetection
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.C.Types
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Mat
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Mat.ToFrom
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Matx
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Point
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Rect
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Size
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Vec
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Exception
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Video.MotionAnalysis
                         opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.VideoIO.VideoCapture
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Operators.Mapping
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.ByteString
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.Cursored
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.Delayed
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.ForeignPtr
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.HintInterleave
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.HintSmall
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.Partitioned
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.Unboxed
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.Undefined
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Repr.Vector
                         repa-3.4.1.3@repa-3.4.1.3-BKe83Ei7qJR1HVE6YMARK4:Data.Array.Repa.Slice
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  BlurImage e263a3edcfadaf33dd5c334335d71161
  exports: f150c23ebe332aa39a3f8599c23a8da7
  blurImage b5c7d3b6a27d2b877b7cd2a8b391fe55
import  -/  Threshold 38b74c1f764faa659c14a4130d52710c
  exports: 524b101b3c47238cbe21e9b0a7d73778
  threshold 1247bc858a053b4a1dc00b93532baea3
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Data.Word 77f42e01d0fb6b071f1ea2176d87fa6c
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.TypeLits 93e12de936472fe3136ec0d1e30a3bd9
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 21ce1800689b373b38139d788d9bbd62
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V2 84a63a6b3f6e8f8486d121e776ecbcc6
import  -/  linear-1.20.7@linear-1.20.7-Hm7B9kQS5iJ4TZVBdSCC2p:Linear.V4 d63c1ea04ef9c7df53c079dbfe81de58
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV c8063b066bd065641a3c0bc0e02a173a
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.ArrayOps 55fc30d3aaa836f4e571a0f350e13de0
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Mat 0eba71efd354e37607a22da576d15e34
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Point d9f0c59be51c5363b2c06035ecd5069a
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Core.Types.Rect 8f7ac2969f3a26fd0c0c6be137636279
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.ImgCodecs 304d0c444ba76cbfb39267716edabd0c
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.ImgProc.StructuralAnalysis 04d4436fc893b57970eb318077173e42
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types e24a3e4c027cc39b421baa6c9d808b51
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Mat 664ff0d10780b55a6702da82566f942a
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Point 331fa2ed78f6b2ca07d91e5c607e6ed4
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Core.Types.Rect cb42f4a7bb1f0b736793d8eb133a4a0e
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Exception 2901739fff6291339e19754f17a9572c
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.ImgCodecs 9809647691d2d7f5c496b361830772ca
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.Internal.Mutable 82600674bbd7d1cba15c541038dc013f
import  -/  opencv-0.0.2.0@opencv-0.0.2.0-4gBe3As27ljUNIMvrGo2x:OpenCV.TypeLevel b76d40490127307d211728bfc0ecba25
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive 6f29f7c5aeee7400d08244e0179fc37e
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector ddd29e288b82595393d88be9897b0e0c
7546904ca25d379161cc61e1cdbd060e
  $fShowContorno :: GHC.Show.Show TestMain.Contorno
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TestMain.Contorno
                  TestMain.$fShowContorno_$cshowsPrec
                  TestMain.$fShowContorno_$cshow
                  TestMain.$fShowContorno_$cshowList -}
7546904ca25d379161cc61e1cdbd060e
  $fShowContorno1 ::
    TestMain.Contorno -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: TestMain.Contorno)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { TestMain.C ww1 ww2 ww3 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (TestMain.$w$cshow ww1 ww2 ww3)
                   s }) -}
7546904ca25d379161cc61e1cdbd060e
  $fShowContorno_$cshow :: TestMain.Contorno -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U,U,U),1*U(U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TestMain.Contorno) ->
                 case w of ww { TestMain.C ww1 ww2 ww3 ->
                 TestMain.$w$cshow ww1 ww2 ww3 }) -}
7546904ca25d379161cc61e1cdbd060e
  $fShowContorno_$cshowList :: [TestMain.Contorno] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [TestMain.Contorno]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TestMain.Contorno
                   TestMain.$fShowContorno1
                   ls
                   s) -}
7546904ca25d379161cc61e1cdbd060e
  $fShowContorno_$cshowsPrec ::
    GHC.Types.Int -> TestMain.Contorno -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><S,1*U(1*U(U),1*U(U,U,U),1*U(U,U,U))><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: TestMain.Contorno)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (TestMain.$fShowContorno_$cshow x))
                   s) -}
360960e715c39871d1175f3837cd0556
  $fShowEstructura :: GHC.Show.Show TestMain.Estructura
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TestMain.Estructura
                  TestMain.$fShowEstructura_$cshowsPrec
                  TestMain.$fShowEstructura_$cshow
                  TestMain.$fShowEstructura_$cshowList -}
360960e715c39871d1175f3837cd0556
  $fShowEstructura1 ::
    TestMain.Estructura -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: TestMain.Estructura)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (TestMain.$fShowEstructura_$cshow x)
                   s) -}
360960e715c39871d1175f3837cd0556
  $fShowEstructura_$cshow :: TestMain.Estructura -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
360960e715c39871d1175f3837cd0556
  $fShowEstructura_$cshowList ::
    [TestMain.Estructura] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [TestMain.Estructura])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ TestMain.Estructura
                   TestMain.$fShowEstructura1
                   ls
                   s) -}
360960e715c39871d1175f3837cd0556
  $fShowEstructura_$cshowsPrec ::
    GHC.Types.Int -> TestMain.Estructura -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: TestMain.Estructura)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (TestMain.$fShowEstructura_$cshow x))
                   s) -}
da9cdebc38900af7c5ec7accc6d302d5
  $s$fShow(,) :: GHC.Show.Show (GHC.Int.Int32, GHC.Int.Int32)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Int.Int32, GHC.Int.Int32)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Int.Int32
                     @ GHC.Int.Int32
                     GHC.Int.$fShowInt32
                     GHC.Int.$fShowInt32)
                  TestMain.$s$fShow(,)_$s$fShow(,)_$cshow
                  TestMain.$s$fShow(,)_$s$fShow(,)_$cshowList -}
6b060aebdad7463f60d4fb2b27278419
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (GHC.Int.Int32, GHC.Int.Int32) -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (GHC.Int.Int32, GHC.Int.Int32)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   GHC.Int.$fShowInt32
                   GHC.Int.$fShowInt32
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
889dcf941ba52fca1f238a73ae44a647
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(GHC.Int.Int32, GHC.Int.Int32)] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [(GHC.Int.Int32, GHC.Int.Int32)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Int.Int32, GHC.Int.Int32)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Int.Int32
                      @ GHC.Int.Int32
                      GHC.Int.$fShowInt32
                      GHC.Int.$fShowInt32
                      GHC.Show.shows22)
                   eta
                   eta1) -}
6c3e6301083b5bd86430d182ba25248f
  $s$p1~2 :: 'GHC.Types.True GHC.Types.~~ 'GHC.Types.True
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   @ 'GHC.Types.True
                   @ 'GHC.Types.True
                   @~ <'GHC.Types.True>_N) -}
36038844a41737268836f1e1d215d62f
  $sapproxPolyDP1 ::
    (OpenCV.Internal.Core.Types.Point.IsPoint
       (OpenCV.Internal.Core.Types.Point.Point 2) GHC.Int.Int32,
     2 Data.Type.Equality.~ 2)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((OpenCV.Core.Types.Point.$fIsPointPointInt32,
                  TestMain.$sapproxPolyDP2
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <GHC.Types.Nat>_N) <2>_N <2>_N))) -}
ead3a585a1cfbd1fd564574577df5abf
  $sapproxPolyDP2 :: 2 GHC.Types.~~ 2
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ GHC.Types.Nat
                   @ GHC.Types.Nat
                   @ 2
                   @ 2
                   @~ <2>_N) -}
4d693169018315217c23f6cdda9663f3
  $scoerceMat2 ::
    Data.Proxy.Proxy ('OpenCV.TypeLevel.S 1)
    -> OpenCV.TypeLevel.DS GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (_proxy :: Data.Proxy.Proxy ('OpenCV.TypeLevel.S 1)) ->
                 OpenCV.TypeLevel.S @ GHC.Int.Int32 (GHC.Int.I32# 1#)) -}
8051b148a4d4c5160f0c6097e9100909
  $scoerceMat4 ::
    Data.Proxy.Proxy
      ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
    -> OpenCV.TypeLevel.DS [OpenCV.TypeLevel.DS GHC.Int.Int32]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (_proxy :: Data.Proxy.Proxy
                                ('OpenCV.TypeLevel.S
                                   '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])) ->
                 OpenCV.TypeLevel.S
                   @ [OpenCV.TypeLevel.DS GHC.Int.Int32]
                   (GHC.Types.:
                      @ (OpenCV.TypeLevel.DS GHC.Int.Int32)
                      (OpenCV.TypeLevel.D @ GHC.Int.Int32)
                      (GHC.Types.:
                         @ (OpenCV.TypeLevel.DS GHC.Int.Int32)
                         (OpenCV.TypeLevel.D @ GHC.Int.Int32)
                         (GHC.Types.[] @ (OpenCV.TypeLevel.DS GHC.Int.Int32))))) -}
ea2e91b2ec282eec2e3a866afbc93d86
  $scontourArea1 ::
    (OpenCV.Internal.Core.Types.Point.IsPoint
       (OpenCV.Internal.Core.Types.Point.Point 2) Foreign.C.Types.CFloat,
     2 Data.Type.Equality.~ 2)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((OpenCV.Core.Types.Point.$fIsPointPointCFloat,
                  TestMain.$sapproxPolyDP2
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <GHC.Types.Nat>_N) <2>_N <2>_N))) -}
fc1add2de82b4a957ceee275199d12b6
  $tc'C :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7177998820599997435##
                   11594091336162995778##
                   TestMain.$trModule
                   TestMain.$tc'C1) -}
461b13e72722ae26d112a3d9503b9932
  $tc'C1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C"#) -}
130a6a2206aaf07ebe3c37fe7b8759c8
  $tc'Circulo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14010204269205810353##
                   4487977289008605835##
                   TestMain.$trModule
                   TestMain.$tc'Circulo1) -}
55f3a5e3b41e160f224baba005d9c067
  $tc'Circulo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Circulo"#) -}
79793140c6ec6b2feb285dfb30497807
  $tc'Nada :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12448725008964693267##
                   14968675181368214006##
                   TestMain.$trModule
                   TestMain.$tc'Nada1) -}
b0622c3c76e8167b17c4517cf09219f2
  $tc'Nada1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Nada"#) -}
3182d09c172ed3ce2ceaadd4b3e89492
  $tc'Rectangulo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15227517270576608500##
                   16550862320134792396##
                   TestMain.$trModule
                   TestMain.$tc'Rectangulo1) -}
ad1941be70c801a4f1d396af9961d677
  $tc'Rectangulo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rectangulo"#) -}
cba4cd5e40a0e64cb551dfe6a51edf97
  $tcContorno :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5269449335384519319##
                   8628465671345915012##
                   TestMain.$trModule
                   TestMain.$tcContorno1) -}
c122b39bb8560d2b18751200ee8bfd35
  $tcContorno1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Contorno"#) -}
298dcaeb96863b626cbd5c2fa455f471
  $tcEstructura :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3685508139181450607##
                   13498726157842419404##
                   TestMain.$trModule
                   TestMain.$tcEstructura1) -}
1c06309e779f81ce2d67292bdeb88381
  $tcEstructura1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Estructura"#) -}
c6bb5e48979a2a698d3a2ec867723a5a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TestMain.$trModule2
                   TestMain.$trModule1) -}
e819526eb0f48616e638f3b276e8af56
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TestMain"#) -}
512447e57bcf01d494475096b3a836fe
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "TPFinalALP-0.1.0.0-6CW1roJgnU72bzP54NcmHs"#) -}
7546904ca25d379161cc61e1cdbd060e
  $w$cshow ::
    GHC.Types.Double
    -> Data.Vector.Vector TestMain.Punto
    -> Data.Vector.Vector TestMain.Contorno
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U,U,U)><L,1*U(U,U,U)>,
     Inline: [0] -}
7b6892575884dd62b1daa40c3554c842
  $waContorno ::
    OpenCV.ImgProc.StructuralAnalysis.Contour
    -> (# GHC.Types.Double, Data.Vector.Vector TestMain.Punto,
          Data.Vector.Vector TestMain.Contorno #)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U)>, Inline: [0] -}
8a41683d0abde9c078180f685753027b
  $waEstructura ::
    OpenCV.Internal.Core.Types.Mat.Mat
      ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
      'OpenCV.TypeLevel.D
      'OpenCV.TypeLevel.D
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Punto
    -> Data.Vector.Vector TestMain.Contorno
    -> TestMain.Estructura
  {- Arity: 5, Strictness: <L,U(U,U)><L,U><S,U><L,U><L,1*U(U,U,U)>,
     Inline: [0] -}
e602a81f6f2a9f536288ebd3afc6cf19
  $wfitRect ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Punto
    -> OpenCV.Core.Types.Rect.Rect2i
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0] -}
755b6bfeb8a896e5a64cc98613b75982
  $wignoreOutmost ::
    GHC.Types.Double
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Punto
    -> Data.Vector.Vector TestMain.Contorno
    -> Data.Vector.Vector TestMain.Contorno
  {- Arity: 5, Strictness: <L,U><S,U><S,U><S,U><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Double)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Array# TestMain.Punto)
                   (ww4 :: Data.Vector.Vector TestMain.Contorno) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0# ww2) of wild2 {
                   GHC.Types.False
                   -> case TestMain.ignoreOutmost1 ww2
                      ret_ty (Data.Vector.Vector TestMain.Contorno)
                      of {}
                   GHC.Types.True
                   -> case GHC.Prim.indexArray#
                             @ TestMain.Punto
                             ww3
                             ww1 of ds1 { Unit# ipv ->
                      case ipv of ww5 { (,) ww6 ww7 ->
                      case ww6 of wild { GHC.Int.I32# x ->
                      let {
                        $j :: GHC.Prim.Void# -> Data.Vector.Vector TestMain.Contorno
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w :: GHC.Prim.Void#)[OneShot] ->
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (Data.Vector.Vector TestMain.Contorno)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newArray#
                                         @ TestMain.Contorno
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         1#
                                         (Data.Vector.Mutable.uninitialised @ TestMain.Contorno)
                                         s1
                                           `cast`
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv1 ipv2 ->
                                  let {
                                    puntos :: Data.Vector.Vector TestMain.Punto
                                    = Data.Vector.Vector @ TestMain.Punto ww1 ww2 ww3
                                  } in
                                  let {
                                    wild1 :: TestMain.Contorno = TestMain.C ww puntos ww4
                                  } in
                                  letrec {
                                    $wfoldlM'_loop :: GHC.Types.SPEC
                                                      -> GHC.Prim.Int#
                                                      -> GHC.Types.Bool
                                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Types.Int #)
                                      {- Arity: 4, Strictness: <S,1*U><L,U><S,1*U><S,U>,
                                         Inline: [0] -}
                                    = \ (w1 :: GHC.Types.SPEC)
                                        (ww8 :: GHC.Prim.Int#)
                                        (w2 :: GHC.Types.Bool)
                                        (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                      case w1 of ds5 { DEFAULT ->
                                      case w2 of wild3 {
                                        GHC.Types.False -> (# w3, GHC.Types.I# ww8 #)
                                        GHC.Types.True
                                        -> case GHC.Prim.writeArray#
                                                  @ (Control.Monad.Primitive.PrimState
                                                       (GHC.ST.ST GHC.Prim.RealWorld))
                                                  @ TestMain.Contorno
                                                  ipv2
                                                  ww8
                                                  wild1
                                                  w3
                                                    `cast`
                                                  (GHC.Prim.State#
                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                               <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                           $wfoldlM'_loop
                                             GHC.Types.SPEC
                                             (GHC.Prim.+# ww8 1#)
                                             GHC.Types.False
                                             s'#
                                               `cast`
                                             (GHC.Prim.State#
                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N))_R } } }
                                  } in
                                  case $wfoldlM'_loop
                                         GHC.Types.SPEC
                                         0#
                                         GHC.Types.True
                                         ipv1
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N))_R of ds3 { (#,#) ipv6 ipv7 ->
                                  case ipv7 of dt5 { GHC.Types.I# dt6 ->
                                  case GHC.Prim.unsafeFreezeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ TestMain.Contorno
                                         ipv2
                                         ipv6
                                           `cast`
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv3 ipv4 ->
                                  (# ipv3
                                       `cast`
                                     (GHC.Prim.State#
                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N))_R,
                                     Data.Vector.Vector
                                       @ TestMain.Contorno
                                       0#
                                       dt6
                                       ipv4 #) } } } }) of ds2 { (#,#) ipv1 ipv2 ->
                          ipv2 }
                      } in
                      case x of wild1 {
                        DEFAULT -> $j GHC.Prim.void#
                        0#
                        -> case ww7 of wild3 { GHC.Int.I32# x1 ->
                           case x1 of wild4 {
                             DEFAULT -> $j GHC.Prim.void# 0# -> ww4 } } } } } } }) -}
dd9bbb69a4ce26f5a871d47513f4b096
  $wisInner ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Punto
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Punto
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><S,U><L,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# TestMain.Punto)
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Array# TestMain.Punto) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww1 ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> letrec {
                        $wgo :: GHC.Prim.Int# -> [TestMain.Punto]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww6 :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww6 ww1) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.indexArray#
                                      @ TestMain.Punto
                                      ww2
                                      (GHC.Prim.+# ww ww6) of ds1 { Unit# ipv ->
                               GHC.Types.: @ TestMain.Punto ipv ($wgo (GHC.Prim.+# ww6 1#)) }
                            GHC.Types.True -> GHC.Types.[] @ TestMain.Punto }
                      } in
                      (TestMain.isInner_go
                         (Data.OldList.sortBy
                            @ TestMain.Punto
                            TestMain.isInner_pointOrder
                            ($wgo 0#))
                         (letrec {
                            $wgo1 :: GHC.Prim.Int# -> [TestMain.Punto]
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (ww6 :: GHC.Prim.Int#) ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# ww6 ww4) of wild1 {
                                GHC.Types.False
                                -> case GHC.Prim.indexArray#
                                          @ TestMain.Punto
                                          ww5
                                          (GHC.Prim.+# ww3 ww6) of ds1 { Unit# ipv ->
                                   GHC.Types.: @ TestMain.Punto ipv ($wgo1 (GHC.Prim.+# ww6 1#)) }
                                GHC.Types.True -> GHC.Types.[] @ TestMain.Punto }
                          } in
                          Data.OldList.sortBy
                            @ TestMain.Punto
                            TestMain.isInner_pointOrder
                            ($wgo1 0#)))
                        `cast`
                      (Data.Monoid.N:All[0]) }) -}
20afbbe13b243d792abe65d01a7a8e14
  $wpArea ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Punto
    -> GHC.Types.Double
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# TestMain.Punto) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector OpenCV.Core.Types.Point.Point2f)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ OpenCV.Core.Types.Point.Point2f
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised
                                   @ OpenCV.Core.Types.Point.Point2f)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         letrec {
                           $wfoldlM'_loop :: GHC.Types.SPEC
                                             -> GHC.Prim.Int#
                                             -> GHC.Prim.Int#
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   GHC.Types.Int #)
                             {- Arity: 4, Strictness: <S,1*U><L,U><S,U><S,U>, Inline: [0] -}
                           = \ (w :: GHC.Types.SPEC)
                               (ww3 :: GHC.Prim.Int#)
                               (ww4 :: GHC.Prim.Int#)
                               (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case w of ds5 { DEFAULT ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# ww4 ww1) of wild {
                               GHC.Types.False
                               -> case GHC.Prim.writeArray#
                                         @ (Control.Monad.Primitive.PrimState
                                              (GHC.ST.ST GHC.Prim.RealWorld))
                                         @ OpenCV.Core.Types.Point.Point2f
                                         ipv1
                                         ww3
                                         (case GHC.Prim.indexArray#
                                                 @ TestMain.Punto
                                                 ww2
                                                 (GHC.Prim.+# ww ww4) of ds2 { Unit# ipv2 ->
                                          case ipv2 of wild1 { (,) a b ->
                                          case GHC.Magic.runRW#
                                                 @ 'GHC.Types.PtrRepLifted
                                                 @ (OpenCV.Internal.Core.Types.Point.Point
                                                      2 Foreign.C.Types.CFloat)
                                                 (\ (s :: GHC.Prim.State#
                                                            GHC.Prim.RealWorld)[OneShot] ->
                                                  case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                                                  case a of wild2 { GHC.Int.I32# x# ->
                                                  case b of wild3 { GHC.Int.I32# x#1 ->
                                                  (OpenCV.Core.Types.Point.$w$ctoPointIO1
                                                     (GHC.Prim.double2Float#
                                                        (GHC.Prim.int2Double# x#))
                                                     (GHC.Prim.double2Float#
                                                        (GHC.Prim.int2Double# x#1))
                                                     s')
                                                    `cast`
                                                  ((#,#)
                                                     <'GHC.Types.VoidRep>_R
                                                     <'GHC.Types.PtrRepLifted>_R
                                                     <GHC.Prim.State# GHC.Prim.RealWorld>_R
                                                     (OpenCV.Internal.Core.Types.Point.Point
                                                        <OpenCV.Internal.Core.Types.Point.PointDim
                                                           Linear.V2.V2, 2>
                                                        <Foreign.C.Types.CFloat>_P)_R)_R } } }) of ds { (#,#) ipv3 ipv4 ->
                                          ipv4 } } })
                                         w1
                                           `cast`
                                         (GHC.Prim.State#
                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                  $wfoldlM'_loop
                                    GHC.Types.SPEC
                                    (GHC.Prim.+# ww3 1#)
                                    (GHC.Prim.+# ww4 1#)
                                    s'#
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R }
                               GHC.Types.True -> (# w1, GHC.Types.I# ww3 #) } }
                         } in
                         case $wfoldlM'_loop
                                GHC.Types.SPEC
                                0#
                                0#
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ OpenCV.Core.Types.Point.Point2f
                                ipv1
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ OpenCV.Core.Types.Point.Point2f
                              0#
                              dt6
                              ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of ww3 { Data.Vector.Vector ww4 ww5 ww6 ->
                 case (OpenCV.ImgProc.StructuralAnalysis.$wcontourArea
                         @ (OpenCV.Internal.Core.Types.Point.Point 2)
                         TestMain.$scontourArea1
                           `cast`
                         (GHC.Classes.(%,%)
                            <OpenCV.Internal.Core.Types.Point.IsPoint
                               (OpenCV.Internal.Core.Types.Point.Point 2)
                               Foreign.C.Types.CFloat>_N
                            ((Data.Type.Equality.~)
                               <GHC.Types.Nat>_N
                               (Sym (OpenCV.Internal.Core.Types.Point.D:R:PointDimPoint[0] <2>_N))
                               <2>_N)_N)_R
                         ww4
                         ww5
                         ww6
                         OpenCV.ImgProc.StructuralAnalysis.ContourAreaAbsoluteValue)
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <OpenCV.Internal.Exception.CvException>_N
                                <Data.Functor.Identity.Identity>_R
                                <GHC.Types.Double>_N)
                           (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   OpenCV.Internal.Exception.CvException
                                   GHC.Types.Double>_R)) of wild {
                   Data.Either.Left x1 -> TestMain.pArea1 x1
                   Data.Either.Right y -> y } } }) -}
6ffbe7f7e9b616577b4565bdc7d5fa0a
  $wpointOrder ::
    GHC.Prim.Int#
    -> GHC.Int.Int32
    -> GHC.Prim.Int#
    -> GHC.Int.Int32
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Int.Int32)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Int.Int32) ->
                 case TestMain.$wrangeComp ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ -> TestMain.isInner_rangeComp ww1 ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
6b7c6cef79c52fb3d17fd2e0a3fb7cfd
  $wrangeComp :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># ww ww1) of wild {
                       GHC.Types.False -> GHC.Types.EQ
                       GHC.Types.True
                       -> let {
                            x1 :: GHC.Prim.Int# = GHC.Prim.narrow32Int# (GHC.Prim.-# ww ww1)
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# x1 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.>#
                                         (GHC.Prim.narrow32Int# (GHC.Prim.negateInt# x1))
                                         20#) of wild2 {
                                 GHC.Types.False -> GHC.Types.EQ GHC.Types.True -> GHC.Types.GT }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.># x1 20#) of wild2 {
                                 GHC.Types.False -> GHC.Types.EQ
                                 GHC.Types.True -> GHC.Types.GT } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww1) of wild {
                   GHC.Types.False -> $j GHC.Prim.void#
                   GHC.Types.True
                   -> let {
                        x1 :: GHC.Prim.Int# = GHC.Prim.narrow32Int# (GHC.Prim.-# ww ww1)
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x1 0#) of wild1 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>#
                                     (GHC.Prim.narrow32Int# (GHC.Prim.negateInt# x1))
                                     20#) of wild2 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True -> GHC.Types.LT }
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.># x1 20#) of wild2 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True -> GHC.Types.LT } } }) -}
71020726622da75055174c5813aa954f
  $wremoveInner ::
    GHC.Types.Double
    -> Data.Vector.Vector TestMain.Punto
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# TestMain.Contorno
    -> (# GHC.Types.Double, Data.Vector.Vector TestMain.Punto,
          Data.Vector.Vector TestMain.Contorno #)
  {- Arity: 5, Strictness: <L,U><L,U(U,U,U)><L,U><S,U><L,U>,
     Inline: [0] -}
207b6237701d71ceffda038709bb00a0
  $wremoveSmaller ::
    GHC.Types.Double
    -> Data.Vector.Vector TestMain.Punto
    -> Data.Vector.Vector TestMain.Contorno
    -> (# GHC.Types.Double, Data.Vector.Vector TestMain.Punto,
          Data.Vector.Vector TestMain.Contorno #)
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U(U,U,U)>, Inline: [0] -}
7546904ca25d379161cc61e1cdbd060e
  data Contorno
    = C GHC.Types.Double
        (Data.Vector.Vector TestMain.Punto)
        (Data.Vector.Vector TestMain.Contorno)
    RecFlag: Recursive
360960e715c39871d1175f3837cd0556
  data Estructura
    = Rectangulo (Data.Vector.Vector TestMain.Estructura)
    | Circulo GHC.Types.Bool GHC.Types.Double
    | Nada
3fa25701cd075c2aa04227d962bede6e
  type Punto = (GHC.Int.Int32, GHC.Int.Int32)
f3ab6f39e3607d1fb7981137645009aa
  aContorno ::
    OpenCV.ImgProc.StructuralAnalysis.Contour -> TestMain.Contorno
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: OpenCV.ImgProc.StructuralAnalysis.Contour) ->
                 case TestMain.$waContorno w of ww { (#,,#) ww1 ww2 ww3 ->
                 TestMain.C ww1 ww2 ww3 }) -}
06e4289536bfadd0b9e6ec46509cdbe8
  aEstructura ::
    OpenCV.Internal.Core.Types.Mat.Mat
      ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
      'OpenCV.TypeLevel.D
      'OpenCV.TypeLevel.D
    -> TestMain.Contorno -> TestMain.Estructura
  {- Arity: 2,
     Strictness: <L,U(U,U)><S(LS(LSL)L),1*U(A,U(U,U,U),1*U(U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: OpenCV.Internal.Core.Types.Mat.Mat
                           ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                           'OpenCV.TypeLevel.D
                           'OpenCV.TypeLevel.D)
                   (w1 :: TestMain.Contorno) ->
                 case w1 of ww { TestMain.C ww1 ww2 ww3 ->
                 case ww2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 TestMain.$waEstructura w ww5 ww6 ww7 ww3 } }) -}
7f8b72d9ebe15d52bc93c7ff617f1a02
  aPunto ::
    OpenCV.Core.Types.Point.Point2i -> (GHC.Int.Int32, GHC.Int.Int32)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: OpenCV.Core.Types.Point.Point2i) ->
                 let {
                   ds :: Linear.V2.V2 GHC.Int.Int32
                   = case p `cast`
                          (OpenCV.Internal.Core.Types.Point.N:Point[0]
                               <2, OpenCV.Internal.Core.Types.Point.PointDim Linear.V2.V2>
                               <GHC.Int.Int32>_P) of ww { GHC.ForeignPtr.ForeignPtr ww1 ww2 ->
                     OpenCV.Core.Types.Point.$w$cfromPoint2 ww1 ww2 }
                 } in
                 (case ds of wild { Linear.V2.V2 a b -> a },
                  case ds of wild { Linear.V2.V2 a b -> b })) -}
b4bb4122f3f62d8ba114c20ff67e8683
  cArea :: TestMain.Contorno -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TestMain.Contorno) ->
                 case ds of wild { TestMain.C a ds1 ds2 -> a }) -}
8d04140bff8ae3f4653bd2a7ace47a9f
  cHijos :: TestMain.Contorno -> Data.Vector.Vector TestMain.Contorno
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TestMain.Contorno) ->
                 case ds of wild { TestMain.C ds1 ds2 hijos -> hijos }) -}
993014c8751a6ea4a70feb228e7798fa
  cPuntos :: TestMain.Contorno -> Data.Vector.Vector TestMain.Punto
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TestMain.Contorno) ->
                 case ds of wild { TestMain.C ds1 puntos ds2 -> puntos }) -}
1c07498ec51899b7bf02f3f9e0fb28c5
  cropFitCont ::
    (1 GHC.TypeLits.<= channels, channels GHC.TypeLits.<= 4) =>
    OpenCV.Internal.Core.Types.Mat.Mat
      ('OpenCV.TypeLevel.S '[height, width])
      ('OpenCV.TypeLevel.S channels)
      depth
    -> TestMain.Contorno
    -> OpenCV.Internal.Exception.CvExcept
         (OpenCV.Internal.Core.Types.Mat.Mat
            ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
            ('OpenCV.TypeLevel.S channels)
            depth)
  {- Arity: 4,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)><L,U(U,U)><L,1*U(A,1*U(U,U,U),A)>,
     Unfolding: (\ @ (channels :: GHC.Types.Nat)
                   @ (height :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (width :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (depth :: OpenCV.TypeLevel.DS GHC.Types.*)
                   ($d~ :: 1 GHC.TypeLits.<= channels)
                   ($d~1 :: channels GHC.TypeLits.<= 4)
                   (eta :: OpenCV.Internal.Core.Types.Mat.Mat
                             ('OpenCV.TypeLevel.S '[height, width])
                             ('OpenCV.TypeLevel.S channels)
                             depth)
                   (eta1 :: TestMain.Contorno) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.Bool
                        @ GHC.Types.Bool
                        @ (channels GHC.TypeLits.<=? 4)
                        @ 'GHC.Types.True
                        $d~1
                          `cast`
                        (Data.Type.Equality.N:~[0] <GHC.Types.Bool>_N <channels
                                                                       GHC.TypeLits.<=? 4>_N <'GHC.Types.True>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.Bool
                        @ GHC.Types.Bool
                        @ (1 GHC.TypeLits.<=? channels)
                        @ 'GHC.Types.True
                        $d~
                          `cast`
                        (Data.Type.Equality.N:~[0] <GHC.Types.Bool>_N <1
                                                                       GHC.TypeLits.<=? channels>_N <'GHC.Types.True>_N) of cobox1 { DEFAULT ->
                 OpenCV.Core.Types.Mat.matSubRect
                   @ height
                   @ width
                   @ ('OpenCV.TypeLevel.S channels)
                   @ depth
                   eta
                   (case eta1 of wild { TestMain.C ds puntos ds1 ->
                    case puntos of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                    TestMain.$wfitRect ww1 ww2 ww3 } }) } }) -}
d1c354d706a5af24b3ae411de3bcc2c0
  fitRect ::
    Data.Vector.Vector TestMain.Punto -> OpenCV.Core.Types.Rect.Rect2i
  {- Arity: 1, Strictness: <S(LSL),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.Vector TestMain.Punto) ->
                 case w of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 TestMain.$wfitRect ww1 ww2 ww3 }) -}
21c385c7adb85dffbaedf2195c5460a5
  ignoreOutmost ::
    TestMain.Contorno -> Data.Vector.Vector TestMain.Contorno
  {- Arity: 1, Strictness: <S(LS(SSS)L),1*U(U,U(U,U,U),U(U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TestMain.Contorno) ->
                 case w of ww { TestMain.C ww1 ww2 ww3 ->
                 case ww2 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 TestMain.$wignoreOutmost ww1 ww5 ww6 ww7 ww3 } }) -}
4d894de8734410f4cb0f20975298063d
  ignoreOutmost1 :: GHC.Prim.Int# -> TestMain.Punto
  {- Arity: 1, Strictness: <L,U>x -}
2c78a79ca74098f0142d57b592f14cd0
  isInner ::
    Data.Vector.Vector TestMain.Punto
    -> Data.Vector.Vector TestMain.Punto -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSL),1*U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Vector.Vector TestMain.Punto)
                   (w1 :: Data.Vector.Vector TestMain.Punto) ->
                 case w of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case w1 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 TestMain.$wisInner ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
73ebdaa76e4c6ae3138e65650f68b248
  isInner_go ::
    [(GHC.Int.Int32, GHC.Int.Int32)]
    -> [(GHC.Int.Int32, GHC.Int.Int32)] -> Data.Monoid.All
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
59712ccdd02d8be47fe33f955d419bf2
  isInner_pointOrder ::
    TestMain.Punto -> TestMain.Punto -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TestMain.Punto) (w1 :: TestMain.Punto) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Int.I32# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Int.I32# ww9 ->
                 TestMain.$wpointOrder ww4 ww2 ww9 ww7 } } } }) -}
c2f2872ec1d5dbda5be95a954ebc740d
  isInner_rangeComp ::
    GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Int.Int32) (w1 :: GHC.Int.Int32) ->
                 case w of ww { GHC.Int.I32# ww1 ->
                 case w1 of ww2 { GHC.Int.I32# ww3 ->
                 TestMain.$wrangeComp ww1 ww3 } }) -}
2f464982a4d415313210fdc51150edfd
  maint :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                TestMain.maint1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
dccb2f09259b7a7ae522af6ffdebde3b
  maint1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
0c85b67848a3cdb727af90cb4707e845
  matDims ::
    OpenCV.Internal.Core.Types.Mat.Mat shape channels depth
    -> (GHC.Int.Int32, GHC.Int.Int32)
  {- Arity: 1, Strictness: <L,1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ (shape :: OpenCV.TypeLevel.DS
                                 [OpenCV.TypeLevel.DS GHC.Types.Nat])
                   @ (channels :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (depth :: OpenCV.TypeLevel.DS GHC.Types.*)
                   (w :: OpenCV.Internal.Core.Types.Mat.Mat shape channels depth) ->
                 let {
                   sh :: [GHC.Int.Int32]
                   = case w `cast`
                          (OpenCV.Internal.Core.Types.Mat.N:Mat[0]
                               <shape>_P
                               <channels>_P
                               <depth>_P) of ww { GHC.ForeignPtr.ForeignPtr ww1 ww2 ->
                     case OpenCV.Internal.Core.Types.Mat.$wmatInfo
                            @ shape
                            @ channels
                            @ depth
                            ww1
                            ww2 of wild { OpenCV.Internal.Core.Types.Mat.MatInfo sh1 ds dt ->
                     sh1 } }
                 } in
                 (GHC.List.$w!! @ GHC.Int.Int32 sh 0#,
                  GHC.List.$w!! @ GHC.Int.Int32 sh 1#)) -}
fd38c7a5a55331724d6567a9a002a6a3
  meanIntensityCont ::
    (1 GHC.TypeLits.<= channels, channels GHC.TypeLits.<= 4) =>
    OpenCV.Internal.Core.Types.Mat.Mat
      ('OpenCV.TypeLevel.S '[height, width])
      ('OpenCV.TypeLevel.S channels)
      depth
    -> TestMain.Contorno -> GHC.Types.Double
  {- Arity: 4,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)><L,U(U,U)><L,1*U(A,1*U(U,U,U),A)>,
     Unfolding: (\ @ (channels :: GHC.Types.Nat)
                   @ (height :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (width :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (depth :: OpenCV.TypeLevel.DS GHC.Types.*)
                   ($d~ :: 1 GHC.TypeLits.<= channels)
                   ($d~1 :: channels GHC.TypeLits.<= 4)
                   (eta :: OpenCV.Internal.Core.Types.Mat.Mat
                             ('OpenCV.TypeLevel.S '[height, width])
                             ('OpenCV.TypeLevel.S channels)
                             depth)
                   (eta1 :: TestMain.Contorno) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.Bool
                        @ GHC.Types.Bool
                        @ (channels GHC.TypeLits.<=? 4)
                        @ 'GHC.Types.True
                        $d~1
                          `cast`
                        (Data.Type.Equality.N:~[0] <GHC.Types.Bool>_N <channels
                                                                       GHC.TypeLits.<=? 4>_N <'GHC.Types.True>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.Bool
                        @ GHC.Types.Bool
                        @ (1 GHC.TypeLits.<=? channels)
                        @ 'GHC.Types.True
                        $d~
                          `cast`
                        (Data.Type.Equality.N:~[0] <GHC.Types.Bool>_N <1
                                                                       GHC.TypeLits.<=? channels>_N <'GHC.Types.True>_N) of cobox1 { DEFAULT ->
                 case (OpenCV.Core.ArrayOps.meanStdDev
                         @ channels
                         @ ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                         @ depth
                         TestMain.$s$p1~2
                           `cast`
                         (Sym (Data.Type.Equality.N:~[0]
                                   <GHC.Types.Bool>_N) (Sym cobox1) <'GHC.Types.True>_N)
                         TestMain.$s$p1~2
                           `cast`
                         (Sym (Data.Type.Equality.N:~[0]
                                   <GHC.Types.Bool>_N) (Sym cobox0) <'GHC.Types.True>_N)
                         (case (TestMain.cropFitCont
                                  @ channels
                                  @ height
                                  @ width
                                  @ depth
                                  TestMain.$s$p1~2
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <GHC.Types.Bool>_N) (Sym cobox1) <'GHC.Types.True>_N)
                                  TestMain.$s$p1~2
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <GHC.Types.Bool>_N) (Sym cobox0) <'GHC.Types.True>_N)
                                  eta
                                  eta1)
                                 `cast`
                               (Trans
                                    (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <OpenCV.Internal.Exception.CvException>_N
                                         <Data.Functor.Identity.Identity>_R
                                         <OpenCV.Internal.Core.Types.Mat.Mat
                                            ('OpenCV.TypeLevel.S
                                               '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                                            ('OpenCV.TypeLevel.S channels)
                                            depth>_N)
                                    (Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either
                                            OpenCV.Internal.Exception.CvException
                                            (OpenCV.Internal.Core.Types.Mat.Mat
                                               ('OpenCV.TypeLevel.S
                                                  '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                                               ('OpenCV.TypeLevel.S channels)
                                               depth)>_R)) of wild {
                            Data.Either.Left x1
                            -> TestMain.meanIntensityCont3 @ channels @ depth x1
                            Data.Either.Right y -> y })
                         (GHC.Base.Nothing
                            @ (OpenCV.Internal.Core.Types.Mat.Mat
                                 ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                                 ('OpenCV.TypeLevel.S 1)
                                 ('OpenCV.TypeLevel.S GHC.Word.Word8))))
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <OpenCV.Internal.Exception.CvException>_N
                                <Data.Functor.Identity.Identity>_R
                                <(OpenCV.Internal.Core.Types.Scalar,
                                  OpenCV.Internal.Core.Types.Scalar)>_N)
                           (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   OpenCV.Internal.Exception.CvException
                                   (OpenCV.Internal.Core.Types.Scalar,
                                    OpenCV.Internal.Core.Types.Scalar)>_R)) of wild {
                   Data.Either.Left x1
                   -> case TestMain.meanIntensityCont1 x1
                      ret_ty GHC.Types.Double
                      of {}
                   Data.Either.Right y
                   -> case y of wild1 { (,) x ds1 ->
                      case x `cast`
                           (OpenCV.Internal.Core.Types.N:Scalar[0]) of ww { GHC.ForeignPtr.ForeignPtr ww1 ww2 ->
                      case OpenCV.Internal.Core.Types.$w$cfromScalar
                             ww1
                             ww2 of wild2 { Linear.V4.V4 a1 b1 c d ->
                      a1 `cast` (Foreign.C.Types.N:CDouble[0]) } } } } } }) -}
1303cbdaa39b022772521fc50f871c30
  meanIntensityCont1 ::
    OpenCV.Internal.Exception.CvException
    -> (OpenCV.Internal.Core.Types.Scalar,
        OpenCV.Internal.Core.Types.Scalar)
  {- Arity: 1, Strictness: <L,U>x -}
1beaf085e95064183bcd0277f2fe4599
  meanIntensityCont2 ::
    OpenCV.Internal.Exception.CvException
    -> OpenCV.Internal.Core.Types.Mat.Mat
         ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
         ('OpenCV.TypeLevel.S 1)
         depth
  {- Arity: 1, Strictness: <L,U>x -}
95fefb07fef37286ad34f5a00a22ba1e
  meanIntensityCont3 ::
    OpenCV.Internal.Exception.CvException
    -> OpenCV.Internal.Core.Types.Mat.Mat
         ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
         ('OpenCV.TypeLevel.S channels)
         depth
  {- Arity: 1, Strictness: <L,U>x -}
ead99d63fa544c6e141c937ac8330041
  meanIntensityCont_$smeanIntensityCont ::
    OpenCV.Internal.Core.Types.Mat.Mat
      ('OpenCV.TypeLevel.S '[height, width])
      ('OpenCV.TypeLevel.S 1)
      depth
    -> TestMain.Contorno -> GHC.Types.Double
  {- Arity: 2, Strictness: <L,U(U,U)><L,1*U(A,1*U(U,U,U),A)>,
     Unfolding: (\ @ (height :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (width :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                   @ (depth :: OpenCV.TypeLevel.DS GHC.Types.*)
                   (eta :: OpenCV.Internal.Core.Types.Mat.Mat
                             ('OpenCV.TypeLevel.S '[height, width])
                             ('OpenCV.TypeLevel.S 1)
                             depth)
                   (eta1 :: TestMain.Contorno) ->
                 case (OpenCV.Core.ArrayOps.meanStdDev
                         @ 1
                         @ ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                         @ depth
                         TestMain.$s$p1~2
                           `cast`
                         (Sym (Data.Type.Equality.N:~[0]
                                   <GHC.Types.Bool>_N) (Sym (LeqDef (<1>_N,
                                                                     <1>_N))) <'GHC.Types.True>_N)
                         TestMain.$s$p1~2
                           `cast`
                         (Sym (Data.Type.Equality.N:~[0]
                                   <GHC.Types.Bool>_N) (Sym (LeqDef (<1>_N,
                                                                     <4>_N))) <'GHC.Types.True>_N)
                         (case (TestMain.cropFitCont
                                  @ 1
                                  @ height
                                  @ width
                                  @ depth
                                  TestMain.$s$p1~2
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <GHC.Types.Bool>_N) (Sym (LeqDef (<1>_N,
                                                                              <1>_N))) <'GHC.Types.True>_N)
                                  TestMain.$s$p1~2
                                    `cast`
                                  (Sym (Data.Type.Equality.N:~[0]
                                            <GHC.Types.Bool>_N) (Sym (LeqDef (<1>_N,
                                                                              <4>_N))) <'GHC.Types.True>_N)
                                  eta
                                  eta1)
                                 `cast`
                               (Trans
                                    (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <OpenCV.Internal.Exception.CvException>_N
                                         <Data.Functor.Identity.Identity>_R
                                         <OpenCV.Internal.Core.Types.Mat.Mat
                                            ('OpenCV.TypeLevel.S
                                               '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                                            ('OpenCV.TypeLevel.S 1)
                                            depth>_N)
                                    (Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either
                                            OpenCV.Internal.Exception.CvException
                                            (OpenCV.Internal.Core.Types.Mat.Mat
                                               ('OpenCV.TypeLevel.S
                                                  '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                                               ('OpenCV.TypeLevel.S 1)
                                               depth)>_R)) of wild {
                            Data.Either.Left x1 -> TestMain.meanIntensityCont2 @ depth x1
                            Data.Either.Right y -> y })
                         (GHC.Base.Nothing
                            @ (OpenCV.Internal.Core.Types.Mat.Mat
                                 ('OpenCV.TypeLevel.S '['OpenCV.TypeLevel.D, 'OpenCV.TypeLevel.D])
                                 ('OpenCV.TypeLevel.S 1)
                                 ('OpenCV.TypeLevel.S GHC.Word.Word8))))
                        `cast`
                      (Trans
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <OpenCV.Internal.Exception.CvException>_N
                                <Data.Functor.Identity.Identity>_R
                                <(OpenCV.Internal.Core.Types.Scalar,
                                  OpenCV.Internal.Core.Types.Scalar)>_N)
                           (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   OpenCV.Internal.Exception.CvException
                                   (OpenCV.Internal.Core.Types.Scalar,
                                    OpenCV.Internal.Core.Types.Scalar)>_R)) of wild {
                   Data.Either.Left x1
                   -> case TestMain.meanIntensityCont1 x1
                      ret_ty GHC.Types.Double
                      of {}
                   Data.Either.Right y
                   -> case y of wild1 { (,) x ds1 ->
                      case x `cast`
                           (OpenCV.Internal.Core.Types.N:Scalar[0]) of ww { GHC.ForeignPtr.ForeignPtr ww1 ww2 ->
                      case OpenCV.Internal.Core.Types.$w$cfromScalar
                             ww1
                             ww2 of wild2 { Linear.V4.V4 a1 b1 c d ->
                      a1 `cast` (Foreign.C.Types.N:CDouble[0]) } } } }) -}
1d7a70fc23d8d9e0386148ee9dd468e1
  pArea :: Data.Vector.Vector TestMain.Punto -> GHC.Types.Double
  {- Arity: 1, Strictness: <S(LSL),1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.Vector TestMain.Punto) ->
                 case w of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 TestMain.$wpArea ww1 ww2 ww3 }) -}
d19cf06693c8dbeb681aa28136aeb2ab
  pArea1 :: OpenCV.Internal.Exception.CvException -> GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>x -}
28482efd3654d5275c307d477009221c
  removeInner :: TestMain.Contorno -> TestMain.Contorno
  {- Arity: 1, Strictness: <S(LLS(LSL)),1*U(U,U(U,U,U),U(U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TestMain.Contorno) ->
                 case w of ww { TestMain.C ww1 ww2 ww3 ->
                 case ww3 of ww4 { Data.Vector.Vector ww5 ww6 ww7 ->
                 case TestMain.$wremoveInner
                        ww1
                        ww2
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 TestMain.C ww9 ww10 ww11 } } }) -}
3eaa5b27d6eadfa0eb5c2c5b76f772e2
  removeSmaller :: TestMain.Contorno -> TestMain.Contorno
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U(U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TestMain.Contorno) ->
                 case w of ww { TestMain.C ww1 ww2 ww3 ->
                 case TestMain.$wremoveSmaller
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 TestMain.C ww5 ww6 ww7 } }) -}
instance GHC.Show.Show [TestMain.Contorno]
  = TestMain.$fShowContorno
instance GHC.Show.Show [TestMain.Estructura]
  = TestMain.$fShowEstructura
"SPEC meanIntensityCont @ 1 _ _ _" [ALWAYS] forall @ (height :: OpenCV.TypeLevel.DS
                                                                  GHC.Types.Nat)
                                                   @ (width :: OpenCV.TypeLevel.DS GHC.Types.Nat)
                                                   @ (depth :: OpenCV.TypeLevel.DS GHC.Types.*)
                                                   ($d~ :: 1 GHC.TypeLits.<= 4)
                                                   ($d~1 :: 1 GHC.TypeLits.<= 1)
  TestMain.meanIntensityCont @ 1 @ height @ width @ depth $d~1 $d~
  = TestMain.meanIntensityCont_$smeanIntensityCont
      @ height
      @ width
      @ depth
"SPEC/TestMain $fShow(,) @ Int32 @ Int32" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                        GHC.Int.Int32)
                                                          ($dShow :: GHC.Show.Show GHC.Int.Int32)
  GHC.Show.$fShow(,) @ GHC.Int.Int32 @ GHC.Int.Int32 $dShow $dShow1
  = TestMain.$s$fShow(,)
"SPEC/TestMain $fShow(,)_$cshow @ Int32 @ Int32" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                               GHC.Int.Int32)
                                                                 ($dShow :: GHC.Show.Show
                                                                              GHC.Int.Int32)
  GHC.Show.$fShow(,)_$cshow @ GHC.Int.Int32
                            @ GHC.Int.Int32
                            $dShow
                            $dShow1
  = TestMain.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/TestMain $fShow(,)_$cshowList @ Int32 @ Int32" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                   GHC.Int.Int32)
                                                                     ($dShow :: GHC.Show.Show
                                                                                  GHC.Int.Int32)
  GHC.Show.$fShow(,)_$cshowList @ GHC.Int.Int32
                                @ GHC.Int.Int32
                                $dShow
                                $dShow1
  = TestMain.$s$fShow(,)_$s$fShow(,)_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

